{
	"name": "movies",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Movies",
						"type": "DatasetReference"
					},
					"name": "Movies"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Movies",
						"type": "DatasetReference"
					},
					"name": "MoviesSink"
				},
				{
					"dataset": {
						"referenceName": "Movies",
						"type": "DatasetReference"
					},
					"name": "MoviesByYearSink"
				}
			],
			"transformations": [
				{
					"name": "YearExtraction"
				},
				{
					"name": "RemovingCols"
				},
				{
					"name": "SortingonMovieid"
				},
				{
					"name": "MoviesByYear"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movieId as string,",
				"          title as string,",
				"          genres as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Movies",
				"Movies derive(Year = toInteger(trim(right(title,6),'()')),",
				"          Title = toString(left(title,length(title)-6))) ~> YearExtraction",
				"YearExtraction select(mapColumn(",
				"          movieId,",
				"          Title = YearExtraction@Title,",
				"          genres,",
				"          Year",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemovingCols",
				"RemovingCols sort(desc(movieId, true)) ~> SortingonMovieid",
				"YearExtraction aggregate(groupBy(Year),",
				"     MoviesCount = count()) ~> MoviesByYear",
				"SortingonMovieid sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          movieId as string,",
				"          title as string,",
				"          genres as string",
				"     ),",
				"     partitionFileNames:['MoviesSink1.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> MoviesSink",
				"MoviesByYear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          movieId as string,",
				"          title as string,",
				"          genres as string",
				"     ),",
				"     partitionFileNames:['MoviesByYear.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> MoviesByYearSink"
			]
		}
	}
}