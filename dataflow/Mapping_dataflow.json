{
	"name": "Mapping_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Customer",
						"type": "DatasetReference"
					},
					"name": "Customer"
				},
				{
					"dataset": {
						"referenceName": "Order",
						"type": "DatasetReference"
					},
					"name": "Order"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "MappingDataflowMaleOut",
						"type": "DatasetReference"
					},
					"name": "MSink"
				},
				{
					"dataset": {
						"referenceName": "FemaleSink",
						"type": "DatasetReference"
					},
					"name": "FSink"
				}
			],
			"transformations": [
				{
					"name": "join"
				},
				{
					"name": "derivedColumn",
					"description": "Full name is created by concatenating first name and last name  "
				},
				{
					"name": "select",
					"description": "Removed first name, last name "
				},
				{
					"name": "MaleCustomers"
				},
				{
					"name": "sort",
					"description": "Sorted by Age"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CUSTOMER_ID as integer,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          AGE as integer,",
				"          GENDER as string,",
				"          ADDRESS as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Customer",
				"source(output(",
				"          CUSTOMER_ID as integer,",
				"          ORDER_ID as integer,",
				"          AMOUNT as integer,",
				"          ORDER_DATE as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Order",
				"Customer, Order join(Customer@CUSTOMER_ID == Order@CUSTOMER_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join",
				"join derive({FULL NAME} = FIRST_NAME+\" \"+LAST_NAME,",
				"          ADDRESS = upper(ADDRESS)) ~> derivedColumn",
				"derivedColumn select(mapColumn(",
				"          {FULL NAME},",
				"          AGE,",
				"          GENDER,",
				"          ADDRESS,",
				"          ORDER_ID,",
				"          AMOUNT,",
				"          ORDER_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select",
				"sort split(GENDER==\"Male\",",
				"     disjoint: false) ~> MaleCustomers@(malecustomers, femalecustomers)",
				"select sort(asc(AGE, true)) ~> sort",
				"MaleCustomers@malecustomers sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          AGE as string,",
				"          GENDER as string,",
				"          ADDRESS as string",
				"     ),",
				"     partitionFileNames:['MaleCsv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> MSink",
				"MaleCustomers@femalecustomers sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          AGE as string,",
				"          GENDER as string,",
				"          ADDRESS as string",
				"     ),",
				"     partitionFileNames:['Female Customers'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> FSink"
			]
		}
	}
}